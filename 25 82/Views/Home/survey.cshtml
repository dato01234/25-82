@{
    ViewData["Title"] = "survey";
}




<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Survey Builder</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 30px 20px;
        }

        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 30px;
        }

        .form-container {
            background: white;
            padding: 25px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        #surveyTitle {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            border: 1px solid #ddd;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: left;
            min-height: 60px;
            height: auto;
            resize: vertical;
        }

        .question-container {
            padding: 15px;
            background: #f9f9f9;
            border-radius: 8px;
            margin-bottom: 15px;
            border: 1px solid #ddd;
        }

        .question-input {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-bottom: 10px;
            min-height: 60px;
            height: auto;
            resize: vertical;
        }

        .type-selector {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin-bottom: 10px;
        }

        .answer-container {
            margin-top: 10px;
        }

        .answer-input {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

            .answer-input input {
                flex: 1;
                padding: 10px;
                border: 1px solid #ddd;
                border-radius: 6px;
            }

        .btn {
            cursor: pointer;
            border: none;
            border-radius: 6px;
            padding: 10px 15px;
            transition: background-color 0.2s;
        }

        .remove-btn {
            background-color: #ff3b30;
            color: white;
        }

            .remove-btn:hover {
                background-color: #e0352b;
            }

        .add-btn {
            background-color: #34c759;
            color: white;
        }

            .add-btn:hover {
                background-color: #28a745;
            }

        .add-question-btn {
            background-color: #5856d6;
            color: white;
            width: 100%;
            padding: 12px;
            font-size: 16px;
            margin-bottom: 15px;
        }

        .submit-btn {
            background-color: #0071e3;
            color: white;
            width: 100%;
            padding: 12px;
            font-size: 16px;
        }

        .saved-container {
            margin-top: 30px;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

            .saved-container h3 {
                text-align: center;
                margin-bottom: 20px;
                font-size: 20px;
                color: #333;
            }

        .horizontal-options {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin: 10px 0;
        }

        .option-item {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .comment-box {
            width: 100%;
            min-height: 80px;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            margin: 10px 0;
            resize: vertical;
        }

        /* Auto-expanding text fields */
        .auto-expand {
            overflow: hidden;
        }

        /* Handle button */
        .handle-btn {
            cursor: move;
            background-color: #999;
            color: white;
            padding: 5px;
            border-radius: 4px;
            margin-right: 5px;
        }

        /* Style for the dragging state */
        .dragging {
            opacity: 0.5;
            background-color: #f0f0f0;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Survey Builder</h1>

        <div class="form-container">
            <textarea id="surveyTitle" class="auto-expand" placeholder="Enter survey title (optional)"></textarea>

            <div id="questionsContainer"></div>

            <button class="btn add-question-btn" onclick="createQuestion()">Add Question</button>
            <button class="btn submit-btn" onclick="saveSurvey()">Save Survey</button>
        </div>

        <div id="savedSurveys"></div>
    </div>

    <script>
        // Initialize with one question by default
        document.addEventListener('DOMContentLoaded', function () {
            createQuestion();

            // Add event listeners for auto-expanding text fields
            document.addEventListener('input', function (e) {
                if (e.target.classList.contains('auto-expand')) {
                    autoExpandTextFields(e.target);
                }
            });

            // Add the auto-expand class to all textareas and inputs that should auto-expand
            const expandableFields = document.querySelectorAll('#surveyTitle, .question-input');
            expandableFields.forEach(field => {
                field.classList.add('auto-expand');
                autoExpandTextFields(field);
            });
        });

        function autoExpandTextFields(element) {
            // Reset height to auto to get the correct scrollHeight
            element.style.height = 'auto';
            // Set height to scrollHeight to expand the field
            element.style.height = element.scrollHeight + 'px';
        }

        function createQuestion() {
            const container = document.getElementById("questionsContainer");

            const questionDiv = document.createElement("div");
            questionDiv.classList.add("question-container");

            // Create question input field
            const questionTextarea = document.createElement("textarea");
            questionTextarea.placeholder = "Enter your question (optional)";
            questionTextarea.classList.add("question-input", "auto-expand");
            questionTextarea.addEventListener('input', function () {
                autoExpandTextFields(this);
            });

            // Create question type selector
            const typeSelector = document.createElement("select");
            typeSelector.classList.add("type-selector");
            typeSelector.onchange = function () { updateAnswerType(this); };

            // Add options to type selector
            const options = [
                { value: "multiple-choice", text: "Advanced Selection (Single Choice)" },
                { value: "multiple-choice-multi", text: "Advanced Selection (Multiple Choice)" },
                { value: "checkboxes", text: "Checkboxes" },
                { value: "file-upload", text: "File Upload" },
                { value: "comment-box", text: "Comment Box" }
            ];

            options.forEach(opt => {
                const option = document.createElement("option");
                option.value = opt.value;
                option.textContent = opt.text;
                typeSelector.appendChild(option);
            });

            // Create remove button
            const removeBtn = document.createElement("button");
            removeBtn.classList.add("btn", "remove-btn");
            removeBtn.textContent = "Remove Question";
            removeBtn.onclick = function () { removeQuestion(this); };

            // Create answer container
            const answerContainer = document.createElement("div");
            answerContainer.classList.add("answer-container");

            // Add all elements to question div
            questionDiv.appendChild(questionTextarea);
            questionDiv.appendChild(typeSelector);
            questionDiv.appendChild(removeBtn);
            questionDiv.appendChild(answerContainer);

            container.appendChild(questionDiv);

            // Initialize answer type based on default selection
            updateAnswerType(typeSelector);

            // Auto-expand the textarea immediately
            autoExpandTextFields(questionTextarea);
        }

        function removeQuestion(button) {
            button.parentElement.remove();
        }

        function updateAnswerType(selectElement) {
            const answerContainer = selectElement.parentElement.querySelector(".answer-container");
            answerContainer.innerHTML = ""; // Clear previous answers

            const type = selectElement.value;

            if (["multiple-choice", "multiple-choice-multi", "checkboxes"].includes(type)) {
                for (let i = 0; i < 3; i++) {
                    addAnswer(answerContainer);
                }

                // Add "Add Answer" button
                const addBtn = document.createElement("button");
                addBtn.classList.add("btn", "add-btn");
                addBtn.textContent = "Add Option";
                addBtn.onclick = function () { addAnswer(answerContainer); };
                answerContainer.appendChild(addBtn);
            }
            else if (type === "comment-box") {
                // Add a prompt field (optional)
                addAnswer(answerContainer, "text", "Comment prompt (optional)");

                // Add textarea preview
                const commentPreview = document.createElement("div");
                commentPreview.innerHTML = `
                            <textarea class="comment-box" placeholder="Preview of comment box" disabled></textarea>
                        `;
                answerContainer.appendChild(commentPreview);

                // Add "Add Prompt" button
                const addBtn = document.createElement("button");
                addBtn.classList.add("btn", "add-btn");
                addBtn.textContent = "Add Prompt";
                addBtn.onclick = function () {
                    addAnswer(answerContainer, "text", "Comment prompt (optional)");
                };
                answerContainer.appendChild(addBtn);
            }
            else if (type === "file-upload") {
                const fileUploadPreview = document.createElement("div");
                fileUploadPreview.innerHTML = `
                            <div style="border: 2px dashed #ddd; border-radius: 8px; padding: 20px; text-align: center; margin-top: 10px;">
                                <p style="margin-bottom: 10px; color: #666;">File upload area</p>
                                <input type="file" disabled>
                            </div>
                        `;
                answerContainer.appendChild(fileUploadPreview);
            }
        }

        function addAnswer(answerContainer, inputType = "text", placeholder = "Enter answer option") {
            const answerDiv = document.createElement("div");
            answerDiv.classList.add("answer-input");
            answerDiv.setAttribute("draggable", "true");

            // Add drag handle
            const handleBtn = document.createElement("span");
            handleBtn.classList.add("handle-btn");
            handleBtn.textContent = "≡";

            const input = document.createElement("input");
            input.type = inputType;
            input.placeholder = placeholder;

            const removeBtn = document.createElement("button");
            removeBtn.classList.add("btn", "remove-btn");
            removeBtn.textContent = "Remove";
            removeBtn.onclick = function () { removeAnswer(this); };

            answerDiv.appendChild(handleBtn);
            answerDiv.appendChild(input);
            answerDiv.appendChild(removeBtn);

            // Add drag and drop event listeners
            answerDiv.addEventListener('dragstart', handleDragStart);
            answerDiv.addEventListener('dragend', handleDragEnd);
            answerDiv.addEventListener('dragover', handleDragOver);
            answerDiv.addEventListener('dragenter', handleDragEnter);
            answerDiv.addEventListener('dragleave', handleDragLeave);
            answerDiv.addEventListener('drop', handleDrop);

            // Insert before the last element (the add button) if it exists
            const lastElement = answerContainer.lastElementChild;
            if (lastElement && lastElement.tagName === "BUTTON") {
                answerContainer.insertBefore(answerDiv, lastElement);
            } else {
                answerContainer.appendChild(answerDiv);
            }
        }

        // Drag and drop functionality
        let draggedItem = null;

        function handleDragStart(e) {
            this.classList.add('dragging');
            draggedItem = this;
            e.dataTransfer.effectAllowed = 'move';
        }

        function handleDragEnd(e) {
            this.classList.remove('dragging');
            draggedItem = null;
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            return false;
        }

        function handleDragEnter(e) {
            this.classList.add('over');
        }

        function handleDragLeave(e) {
            this.classList.remove('over');
        }

        function handleDrop(e) {
            e.stopPropagation();

            if (draggedItem != this) {
                const container = this.parentNode;
                const children = Array.from(container.children);
                const draggedIndex = children.indexOf(draggedItem);
                const targetIndex = children.indexOf(this);

                if (draggedIndex < targetIndex) {
                    container.insertBefore(draggedItem, this.nextSibling);
                } else {
                    container.insertBefore(draggedItem, this);
                }
            }

            this.classList.remove('over');
            return false;
        }

        function removeAnswer(button) {
            button.parentElement.remove();
        }

        function saveSurvey() {
            const surveyTitle = document.getElementById("surveyTitle").value.trim();
            const questions = document.querySelectorAll(".question-container");

            // Check if there's at least one question
            if (questions.length === 0) {
                alert("Please add at least one question to your survey.");
                return;
            }

            let surveyData = `<div class="saved-container"><h3>${surveyTitle || ""}</h3>`;

            let validQuestionCount = 0;

            questions.forEach((question, index) => {
                const questionText = question.querySelector(".question-input").value;
                const questionType = question.querySelector(".type-selector").value;
                const answers = Array.from(question.querySelectorAll(".answer-container input")).map(input => input.value);

                validQuestionCount++;

                surveyData += `<p><strong>${validQuestionCount}. ${questionText}</strong></p>`;

                if (questionType === "comment-box") {
                    // For comment box, show prompts if any
                    if (answers.length > 0 && answers.some(a => a.trim())) {
                        surveyData += `<div style="margin: 5px 0;">`;
                        answers.forEach((answer, i) => {
                            if (answer.trim()) {
                                surveyData += `<p style="color: #666; margin: 5px 0;">${answer}</p>`;
                            }
                        });
                        surveyData += `</div>`;
                    }

                    // Add the comment textarea
                    surveyData += `<textarea class="comment-box" placeholder="Type your answer here..."></textarea>`;
                }
                else if (questionType === "file-upload") {
                    surveyData += `
                                <div style="border: 2px dashed #ddd; border-radius: 8px; padding: 20px; text-align: center; margin: 10px 0;">
                                    <p style="margin-bottom: 10px; color: #666;">Click to upload file</p>
                                    <input type="file">
                                </div>
                            `;
                }
                else if (answers.length > 0) {
                    // Create horizontal radio or checkbox options
                    const inputType = questionType === "multiple-choice-multi" ? "checkbox" :
                        questionType === "checkboxes" ? "checkbox" : "radio";

                    surveyData += `<div class="horizontal-options">`;
                    answers.forEach((answer, i) => {
                        // Handle empty options
                        if (!answer.trim()) { 
                            return; // Skip empty options
                        }

                        surveyData += `
                                    <div class="option-item">
                                        <input type="${inputType}" id="q${validQuestionCount}_a${i}" name="question_${validQuestionCount}" value="${answer}">
                                        <label for="q${validQuestionCount}_a${i}">${answer}</label>
                                    </div>`;
                    });
                    surveyData += `</div>`;
                }
            });

            surveyData += "</div>";

            document.getElementById("savedSurveys").innerHTML += surveyData;

            // Clear the form for the next survey
            document.getElementById("surveyTitle").value = "";
            document.getElementById("questionsContainer").innerHTML = "";
            createQuestion(); // Add one empty question for the next survey

            // Scroll to the saved survey
            document.getElementById("savedSurveys").lastElementChild.scrollIntoView({ behavior: 'smooth' });
        } 
    </script>
</body>
</html>
